divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/rawdata/Divvy_Stations_Trips_2014-Q1Q2/Divvy_Trips_2014_Q1Q2.csv")
names(divvydata)
nrows(divvydata)
# splitdf function will return a list of training and testing sets
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splits <- splitdf(divvydata, seed=10000)
str(splits)
lapply(splits,nrow)
training <- splits$trainset
testing <- splits$testset
View(testing)
View(training)

nrow(testing)
testdata <- training
View(testdata)
didvvyata$starttime <- strptime(testdata$starttime,"%m/%d/%Y %H:%M")
testdata$stoptime <- strptime(testdata$stoptime,"%m/%d/%Y %H:%M")
testdata$weekday <- weekdays(testdata$starttime)
testdata$month <- months(testdata$starttime)
View(testdata)
testdata$season[testdata$month=="January"] <- "Winter"
testdata$season[testdata$month=="February"] <- "Winter"
testdata$season[testdata$month=="March"] <- "Spring"
testdata$season[testdata$month=="April"] <- "Spring"
testdata$season[testdata$month=="May"] <- "Spring"
testdata$season[testdata$month=="June"] <- "Summer"
testdata$season[testdata$month=="July"] <- "Summer"
testdata$season[testdata$month=="August"] <- "Summer"
testdata$season[testdata$month=="September"] <- "Fall"
testdata$season[testdata$month=="October"] <- "Fall"
testdata$season[testdata$month=="November"] <- "Fall"
testdata$season[testdata$month=="December"] <- "Winter"
View(testdata)
testdata$hour <- format(testdata$starttime,"%H")
testdata$stationpair <- paste(testdata$from_station_name,"&&",testdata$to_station_name)
percent <- round(summary(testdata$weekday) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$weekday), percent)
pie(summary(testdata$weekday), lab=labels)
pie(table(usertype))
percent <- round(summary(testdata$usertype) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$usertype), percent)
pie(summary(testdata$usertype), lab=labels)
barplot(table(hour))
barplot(table(month))
barplot(table(season))
barplot(table(testdata$season))
barplot(table(testdata$weekday))
testdata$stationpair <- as.factor(testdata$stationpair)
summary(testdata$stationpair)
qplot(testdata$starttime, testdata$trip_id, geom = "jitter", alpha = I(1/50), size=testdata$from_station_name)


#---------
divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/divvy/Data/divvy2014/divvydata2014.csv")
divvydata$starttime <- strptime(divvydata$starttime,"%m/%d/%Y %H:%M")
divvydata$stoptime <- strptime(divvydata$stoptime,"%m/%d/%Y %H:%M")
divvydata$weekday <- weekdays(divvydata$starttime)
divvydata$month <- months(divvydata$starttime)
divvydata$season[divvydata$month=="January"] <- "Winter"
divvydata$season[divvydata$month=="February"] <- "Winter"
divvydata$season[divvydata$month=="March"] <- "Spring"
divvydata$season[divvydata$month=="April"] <- "Spring"
divvydata$season[divvydata$month=="May"] <- "Spring"
divvydata$season[divvydata$month=="June"] <- "Summer"
divvydata$season[divvydata$month=="July"] <- "Summer"
divvydata$season[divvydata$month=="August"] <- "Summer"
divvydata$season[divvydata$month=="September"] <- "Fall"
divvydata$season[divvydata$month=="October"] <- "Fall"
divvydata$season[divvydata$month=="November"] <- "Fall"
divvydata$season[divvydata$month=="December"] <- "Winter"



testdata$stationpair <- as.factor(testdata$stationpair)
testdata$season <- as.factor(testdata$season)
testdata$month <- as.factor(testdata$month)
testdata$weekday <- as.factor(testdata$weekday)
text(table(usertype))
pie(table(usertype))
percent <- round(summary(testdata$usertype) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$usertype), percent)
pie(summary(testdata$usertype), lab=labels)
percent <- round(summary(testdata$hours) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$hours), percent)
pie(summary(testdata$hours), lab=labels)
percent <- round(summary(testdata$hour) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$hour), percent)
pie(summary(testdata$hour), lab=labels)
summary(testdata$hour)
percent <- round(summary(testdata$usertype) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$usertype), percent)
percent <- round(summary(testdata$hour) * 100 / nrow(testdata))
summary(testdata$hour)
summary(testdata$usertype)
percent <- round(summary(testdata$weekday) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$weekday), percent)
pie(summary(testdata$weekday), lab=labels)
pie(table(weekday))
pie(table(hour))
bar(table(hour))
plot(density(starttime))
barplot(table(hour))
barplot(table(month))
barplot(table(season))
barplot(table(testdata$season))
barplot(table(testdata$weekday))
summary(testdata$from_station_name)
summary(testdata$stationpair)
testdata$stationpair <- as.factor(testdata$stationpair)
summary(testdata$stationpair)
barplot(table(stationpair))
names(testdata)
summary(hour)
summary(stationpair)
summary(testdata$stationpair)
summary(testdata$hour)
testdata$stationpair <- as.factor(testdata$hour)
percent <- round(summary(testdata$weekday) * 100 / nrow(testdata))
labels <- sprintf("%s (%d%%)", levels(testdata$weekday), percent)
pie(summary(testdata$weekday), lab=labels)
pie(table(weekday))
pie(table(hour))
bar(table(hour))
plot(density(starttime))
barplot(table(hour))
barplot(table(month))
barplot(table(season))
barplot(table(testdata$season))
barplot(table(testdata$weekday))
summary(testdata$from_station_name)
summary(testdata$stationpair)
testdata$stationpair <- as.factor(testdata$stationpair)
summary(testdata$stationpair)
barplot(table(stationpair))
names(testdata)
summary(hour)
summary(stationpair)
summary(testdata$stationpair)
summary(testdata$hour)
testdata$stationpair <- as.factor(testdata$hour)
summary(testdata$hour)
names(testdata)
barplot(as.matrix(testdata[,16:17])beside=TRUE, legend=testdata$stationpair, col=heat.color(24), border="White")
barplot(as.matrix(testdata[,16:17]), beside=TRUE, legend=testdata$stationpair, col=heat.color(24), border="White")
install.packages("colorspace")
library(colorspace)
barplot(as.matrix(testdata[,16:17]), beside=TRUE, legend=testdata$stationpair, col=heat.color(24), border="White")
library(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
barplot(as.matrix(testdata[,16:17]), beside=TRUE, legend=testdata$stationpair, col=heat.color(24), border="White")
barplot(as.matrix(testdata[,16:17]), beside=TRUE, legend=testdata$stationpair, col=heat.colors(24), border="White")
counts <- table(testdata$hour, testdata$stationpair)
barplot(counts, main="This is main line", xlab="This is xlabel" col=heat.colors(24), border="white")
barplot(counts, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
counts <- table(testdata$stationpair, testdata$hour)
barplot(counts, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
counts <- table(testdata$stationpair, testdata$hour)
barplot(counts, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
counts <- table(testdata$stationpair)
barplot(counts, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
barplot(counts, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
counts1 <- table(testdata$stationpair)
barplot(counts1, main="This is main line", xlab="This is xlabel", col=heat.colors(24), border="white")
barplot
barplot(testdata$stationpair)
barplot(testdata$stationpair))
barplot(table(testdata$stationpair))
barplot(table(testdata$hour))
barplot(table(testdata$season))
barplot(table(testdata$hour))
barplot(table(testdata$stationpair))
barplot(as.matrix(testdata[,16:17]), main="This is main line", xlab="This is xlabel", col=heat.colors(12), border="white")
barplot(as.matrix(testdata[,13:14]), main="This is main line", xlab="This is xlabel", col=heat.colors(12), border="white")
summary(testdata)
summary(testdata)
testdata$hour <- as.numeric(testdata$hour)
summary(testdata)
testdata$season <- as.factor(testdata$season)
summary(testdata)
testdata$month <- as.factor(testdata$month)
testdata$weekday <- as.factor(testdata$weekday)
barplot(as.matrix(testdata[,13:14]), main="This is main line", xlab="This is xlabel", col=heat.colors(12), border="white")
summary(testdata)
barplot(as.matrix(testdata[,13:14]), main="This is main line", xlab="This is xlabel", col=heat.colors(12), border="white")
names(testdata)
barplot(as.matrix(testdata[,14:15]), main="This is main line", xlab="This is xlabel", col=heat.colors(12), border="white")
barplot(as.matrix(testdata[,14:15]), main="This is main line", xlab="This is xlabel", col=heat.colors(2), border="white")
barplot(as.matrix(testdata[,14:15]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
barplot(table(hour))
barplot(table(bikeid))
barplot(as.matrix(testdata[,c(hour,stationpair)]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
barplot(as.matrix(testdata[,c("hour","stationpair")]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
plot(testdata$hours,testdata$starttime)
plot(testdata$hours,testdata$month)
plot(testdata)
plot(testdata$hours, testdata$starttime)
summary(testdata)
plot(testdata$hours, testdata$starttime)
plot(as.factor(testdata$starttime), testdata$hour )
plot(testdata$starttime, testdata$hour )
plot(testdata$starttime, testdata$hour)
dev.off()
plot(testdata$starttime, testdata$hour)
gplot(testdata$starttime, testdata$hour)
install.packages("gplots")
gplot(testdata$starttime, testdata$hour)
gplots(testdata$starttime, testdata$hour)
rv <- seq(1.3, 2.9, .1)
rv <- rv[-grep("1.6", rv)] # remove R version 1.6
pckg.num <- c(110,129,162,219,273,357,406,548,647,739,911,1000,1300,1427,1614,1952)
rv.dates <- c("2001-6-21", "2001-12-17","2002-06-12","2003-05-27",
"2003-11-16","2004-06-05","2004-10-12","2005-06-18","2005-12-16", "2006-05-31",
"2006-12-12","2007-04-12","2007-11-16","2008-03-18","2008-10-18","2009-09-17")
pckg.fit <- lm(pckg.num~rv)
png("CRAN_packages.png")
par(mar=c(7, 5, 5, 3), las=2)
plot(as.POSIXct(rv.dates), pckg.num, xlab="",ylab="",col="red", log="y", pch=19, axes=F)
axis.POSIXct(1, 1:16, rv.dates, format="%Y-%m-%d")
mtext("Date", side=1, line=5, las=1)
axis(2, at=c(100,200,300,400,500,600,800,100,1200,1500,2000))
mtext("Number of CRAN Packages", side=2, line=3, las=3)
axis.POSIXct(3, rv.dates, rv.dates, labels=as.character(rv))
mtext("R Version", side=3, line=3, las=1)
axis(4, pckg.num)
abline(v=as.POSIXct(rv.dates), col="lightgray", lty="dashed")
abline(h=pckg.num, col="lightgray", lty="dashed")
box()
abline(lm(log10(pckg.num)~as.POSIXct(rv.dates)), col="red")
dev.off()
plot(testdata$bikeid)
plot(testdata$trip_id)
plot(testdata$trip_id, type="1")
plot(testdata$trip_id, type="b")
hist(testdata$hour, freq=F)
curve(dnorm(x, mean(testdata$hour), sd(testdata$hour)), add=T)
qnorm(testdata$hour)
qqnorm(testdata$hour)
qline(testdata$hour)
qqline(testdata$hour)
barplot(table(testdata$hour, testdata$weekday), legend.text=T)
savehistory("~/OneDrive/MUM/datamining/DivvyFinal.Rhistory")
barplot(table(testdata$hour, testdata$weekday), legend.text=T, col=heat.color(24))
barplot(table(testdata$hour, testdata$weekday), legend.text=T, col=heat.colors(24))
barplot(table(testdata$hour, testdata$weekday), beside=T, legend.text=T, col=heat.colors(24))
barplot(table(testdata$hour, testdata$weekday), beside=T, col=heat.colors(3))
barplot(table(testdata$hour, testdata$weekday), beside=T, col=heat.colors(50))
barplot(table(testdata$hour, testdata$weekday), beside=T, col=heat.colors(24))
barplot(table(testdata$hour, testdata$weekday), beside=T, col=topo.colors(24))
barplot(table(testdata$hour, testdata$weekday), beside=T, col=terrain.colors(24))
barplot(table(testdata$hour, testdata$weekday), legend.text=T, beside=T, col=terrain.colors(24))
dev.off()
barplot(table(testdata$hour, testdata$weekday), legend.text=T, beside=T, col=terrain.colors(24))
legend
help(legend)
barplot(table(testdata$hour, testdata$weekday), beside=T, col=terrain.colors(24))
legend(0,12)
legend("topright", )
legend("topright", legend)
legend("topright", "(x,y)", pch=1, title="topright")
legend("topright", "(x,y)", pch=1, title="Hours")
legend("right", "(x,y)", pch=1, title="Hours")
barplot(table(testdata$hour, testdata$weekday), beside=T, col=terrain.colors(24))
legend("right", "(x,y)", pch=1, title="Hours")
barplot(table(testdata$hour, testdata$weekday), beside=T, col=terrain.colors(24))
legend("top", "(x,y)", pch=1, title="Hours")
barplot(table(testdata$hour, testdata$weekday), beside=T, col=terrain.colors(24))
legend("topright",
legend = testdata$hour,
fill = 1:6, ncol = 2,
cex = 0.75)
savehistory("~/OneDrive/MUM/datamining/DivvyFinal1.Rhistory")
asfasf
asdf
asdfaf
barplot(table(testdata$hour, testdata$stationpair), beside=T, col=terrain.colors(24))
barplot(table(testdata$stationpair, testdata$hour), beside=T, col=terrain.colors(24))
barplot(table(testdata$stationpair, testdata$hour),  col=terrain.colors(24))
barplot(table(testdata$hour, testdata$stationpair), col=terrain.colors(24))
barplot(table(testdata$stationpair), col=terrain.colors(24))
barplot(table(testdata$stationpair), col=terrain.colors(24))
barplot(table(testdata$stationpair))
barplot(table(testdata$stationpair, testdata$weekday),  col=terrain.colors(24))
barplot(table(testdata$stationpair, testdata$weekday),  beside=T, col=terrain.colors(24))
barplot(table(testdata$stationpair, testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(testdata$stationpair, testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(testdata$stattime, testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(testdata$starttime, testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(sory.list(testdata$starttime), testdata$month),  beside=T, col=terrain.colors(24))
barplot(table(sort.list(testdata$starttime), testdata$month),  beside=T, col=terrain.colors(24))
testdata1 <- testdata
testdata1$starttimefact <- factor(testdata1$starttime)
testdata1$starttimefact <- as.factor(testdata1$starttime)
testdata1$starttimechar <- as.character(testdata1$starttime)
barplot(table(sort.list(testdata1$starttimechar), testdata1$month),  beside=T, col=terrain.colors(24))
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=terrain.colors(2))
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$weekday),  legend=T, beside=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=heat.colors(2))
legend("topright",legend = testdata$usertype, ncol = 2, cex = 0.75)
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=heat.colors(2))
legend("topright",legend = testdata$usertype)
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$season),  beside=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$season),  beside=T, legent=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$season),  legend=T, beside=T, col=heat.colors(2))
plot(x=testdata$starttime, y=testdata$hour, ylim=c(0,24), col='black', type='l', main='YHOO stock close', xlab='date', ylab='close ($)', xaxt='n')
require(xts)
install.packages("xts")
library(xts)
require(xts)
savehistory("~/DivvyFinal2.Rhistory")
source('~/OneDrive/MUM/datamining/DivvyData.R')
xtstestdata <- as.xts(testdata,dateFormat="Date")
str(testdata)
str(testdata$starttime)
summary(testdata$starttime)
datalist <- as.Date(testdata$starttime)
plot(datalist, testdata$hour)
xtstestdata <- as.xts(testdata,dateFormat="Date")
xtstestdata <- as.xts(testdata,dateFormat="POSIXlt")
xtstestdata <- as.xts(testdata,dateFormat="Date")
data(matrix_xts)
data(sample_matrix)
class(sample_matrix)
names(sample_matrix)
str(sample_mateix)
str(sample_matrix)
sample_matix
xtstestdata <- as.xts(testdata,dateFormat="starttime")
plot.xts
p0 <- qplot(testdata$starttime, testdata$hour, geom="bar", stat="identity", xlab="2010:  12/31 - 1/1 GMT", ylab="tweets/hr")
install.packages("ggplot2", dependencies = TRUE )
p0 <- qplot(testdata$starttime, testdata$hour, geom="bar", stat="identity", xlab="2010:  12/31 - 1/1 GMT", ylab="tweets/hr")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
p0 <- qplot(testdata$starttime, testdata$hour, geom="bar", stat="identity", xlab="2010:  12/31 - 1/1 GMT", ylab="tweets/hr")
qplot(testdata$starttime, testdata$hour, geom="bar", stat="identity", xlab="2010:  12/31 - 1/1 GMT", ylab="tweets/hr")
p0 <- qplot(testdata$starttime, testdata$hour, geom="dot", stat="identity", xlab="2010:  12/31 - 1/1 GMT", ylab="tweets/hr")
qplot(testdata$starttime, testdata$hour, shape=count(testdata))
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata))
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$starttime))
qplot(testdata$starttime, testdata$hour)
qplot(testdata$starttime, testdata$hour, geom="point")
qplot(testdata$starttime, testdata$hour,  geom=point)
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$trip_id) geom="point"")
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$trip_id), geom="point"")
)
.
;
asdfa
fasdf
sdfasfas<>(()))
);
/\
savehistory("~/DivvyFinal3.Rhistory")
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$trip_id), geom="point")
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point")
ggplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point")
ggplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point", color=color)
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point", color=color)
install.packages("RColorBrewer")
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point", color=color)
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point", color="color")
qplot(testdata$starttime, testdata$hour, geom="density", color="color")
qplot(testdata$starttime, testdata$hour, geom="point", color="color")
qplot(testdata$starttime, testdata$hour, shape=as.factor(testdata$hour), geom="point", color="color")
qplot(testdata$starttime, testdata$hour, shape=as.count(testdata$hour), geom="point", color="color")
qplot(testdata$starttime, testdata$hour, shape=as.count(testdata$hour), geom = "jitter", alpha = I(1/3), color="color")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/3), color="color")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/6), color="color")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/20))
qplot(testdata$starttime, testdata$hour, geom = "point", alpha = I(1/20))
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/20))
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/10))
qplot(testdata$starttime, testdata$month, geom = "jitter", alpha = I(1/10))
qplot(testdata$starttime, testdata$weekday, geom = "jitter", alpha = I(1/10))
qplot(testdata$starttime, testdata$weekday, geom = "jitter", alpha = I(1/4))
qplot(testdata$starttime, testdata$weekday, geom = "jitter", alpha = I(1/50))
qplot(testdata$starttime, testdata$weekday, geom = "jitter", alpha = I(1/50), size=testdata$hour)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$trip_id)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$from_station_name)
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=heat.colors(2))
barplot(table(testdata$usertype, testdata1$weekday),  beside=T, col=terrain.colors(2))
barplot(table(testdata$usertype, testdata$weekday),  beside=T, col=terrain.colors(2))
barplot(table(testdata$stationpair, testdata$weekday),  beside=T, col=terrain.colors(2))
barplot(table(testdata$stationpair, testdata$hour),  beside=T, col=terrain.colors(2))
qplot(testdata$starttime, testdata$trip_id, geom = "jitter", alpha = I(1/50), size=testdata$from_station_name)
barplot(table(testdata$starttime))
barplot(table(testdata$starttime), beside=T)
barplot(table(testdata$stationpair, testdata$hour), beside=T)
barplot(table(testdata$stationpair, testdata$hour))
barplot(table(testdata$stationpair, testdata$hour), legend=T)
barplot(table(testdata$hour, testdata$stationpair), legend=T)
barplot(table(testdata$hour, testdata$stationpair), legend=T)
barplot(table(testdata$hour, testdata$stationpair))
barplot(table(testdata$weekday, testdata$stationpair))
barplot(table(testdata$stationpair, testdata$weekday))
barplot(table(testdata$stationpair, testdata$weekday), legend=T)
barplot(table(testdata$weekday, testdata$stationpair), legend=T)
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrian.colors(24))
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrain.colors(24))
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrain.colors(4))
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrain.colors(7))
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrain.colors(4))
barplot(table(testdata$weekday, testdata$stationpair), legend=T, col=terrain.colors(7))
barplot(table(testdata$weekday, testdata$stationpair), beside=T, legend=T, col=terrain.colors(7))
summary(testdata)
summary(testdata$stationpair)
str(testdata$stationpair)
summary(testdata$stationpair)
barplot(table(testdata$stationpair), beside=T, legend=T, col=terrain.colors(7))
savehistory("~/DivvyFinal2.Rhistory")
divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/rawdata/Divvy_Stations_Trips_2014-Q1Q2/Divvy_Trips_2014_Q1Q2.csv")
divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/divvy/Data/divvy2014/divvydata2014.csv")
divvydata$starttime <- strptime(divvydata$starttime,"%m/%d/%Y %H:%M")
divvydata$stoptime <- strptime(divvydata$stoptime,"%m/%d/%Y %H:%M")
divvydata$weekday <- weekdays(divvydata$starttime)
divvydata$month <- months(divvydata$starttime)
divvydata$season[divvydata$month=="January"] <- "Winter"
divvydata$season[divvydata$month=="February"] <- "Winter"
divvydata$season[divvydata$month=="March"] <- "Spring"
divvydata$season[divvydata$month=="April"] <- "Spring"
divvydata$season[divvydata$month=="May"] <- "Spring"
divvydata$season[divvydata$month=="June"] <- "Summer"
divvydata$season[divvydata$month=="July"] <- "Summer"
divvydata$season[divvydata$month=="August"] <- "Summer"
divvydata$season[divvydata$month=="September"] <- "Fall"
divvydata$season[divvydata$month=="October"] <- "Fall"
divvydata$season[divvydata$month=="November"] <- "Fall"
divvydata$season[divvydata$month=="December"] <- "Winter"
> qplot(divvydata$starttime, divvydata$trip_id, geom = "jitter", alpha = I(1/50), size=divvydata$from_station_name)
qplot(divvydata$starttime, divvydata$trip_id, geom = "jitter", alpha = I(1/50), size=divvydata$from_station_name)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(ggplot2)
qplot(divvydata$starttime, divvydata$trip_id, geom = "jitter", alpha = I(1/50), size=divvydata$from_station_name)
summary(divvydata)
savehistory("~/divvvtempmay12.Rhistory")
savehistory("~/Desktop/divvytempmay12.Rhistory")
testdata$season <- as.factor(testdata$season)
testdata$month <- as.factor(testdata$month)
testdata$weekday <- as.factor(testdata$weekday)
divvydata$season <- as.factor(divvydata$season)
divvydata$month <- as.factor(divvydata$month)
divvydata$weekday <- as.factor(divvydata$weekday)
qplot(divvydata$starttime, divvydata$trip_id, geom = "jitter", alpha = I(1/20), size=divvydata$from_station_name)
splits <- splitdf(divvydata, seed=20000)
str(splits)
lapply(splits,nrow)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/10))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splits <- splitdf(divvydata, seed=20000)
lapply(splits,nrow)
testdata <- splits$trainset
qplot(testdata$starttime, testdata$trip_id, geom = "jitter", alpha = I(1/50), size=testdata$from_station_name)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$from_station_name)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/10))
qplot(testdata$starttime, testdata$weekday, geom = "jitter", alpha = I(1/50), size=testdata$hour)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour)
View(testdata)
testdata$hour <- format(testdata$starttime,"%H")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, color="color")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour=color)
install.packages("colortools")
library(colortools)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour=color)
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color)
'""'
)
q
:
?
afdasf
as
fas
fasdf
a
")"
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color")
qplot(testdata$weekday, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color")
qplot(testdata$from_station_name, testdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color")
dev.off()
barplot(table(testdata$hour, testdata$weekday), legend.text=T, beside=T, col=terrain.colors(24))
barplot(table(divvydata$hour, divvydata$weekday), legend.text=T, beside=T, col=terrain.colors(24))
divvydata$hour <- format(divvydata$starttime,"%H")
barplot(table(divvydata$hour, divvydata$weekday), legend.text=T, beside=T, col=terrain.colors(24))
View(divvydata)
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24))
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24), main="All Days of the week in the year 2014" xlab="24 hours of a day")
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24), main="All Days of the week in the year 2014" ,xlab="24 hours of a day")
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24), main="Hour / Week in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24), main="Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
subscribers <- divvydata[gender=="Subscriber"]
subscribers <- divvydata[divvydata$gender=="Subscriber"]
customers <- divvydata[divvydata$gender=="Customer"]
barplot(table(subscribers$hour, subscribers$weekday), beside=T, col=terrain.colors(24), main="Subscribers - Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
barplot(table(divvydata$hour, divvydata$weekday), beside=T, col=terrain.colors(24), main="Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
attach(divvydata)
customers <- divvydata[gender=="Customer"]
customers <- divvydata[gender=="Customer",]
customers <- divvydata[,gender=="Customer"]
customers <- divvydata[usertype=="Customer", ]
subscribers <- divvydata[usertype=="Subscriber"]
subscribers <- divvydata[usertype=="Subscriber",]
barplot(table(subscribers$hour, subscribers$weekday), beside=T, col=terrain.colors(24), main="Subscribers - Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
barplot(table(customers$hour, customers$weekday), beside=T, col=terrain.colors(24), main="Customers - Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
customerstestdata <- divvydata[gender=="Customer",]
subscriberstestdata <- divvydata[usertype=="Subscriber",]
qplot(testdatacustomer$from_station_name, testdatacustomer$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color")
qplot(customerstestdata$from_station_name, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=testdata$hour, colour="color")
qplot(customerstestdata$from_station_name, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=customerstestdata$hour, colour="color")
qplot(customerstestdata$from_station_name, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=customerstestdata$hour, colour="color")
customerstestdata <- testdata[gender=="Customer",]
subscriberstestdata <- testdata[usertype=="Subscriber",]
qplot(customerstestdata$from_station_name, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=customerstestdata$hour, colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=customerstestdata$hour, colour="color")
customerstestdata <- testdata[usertype=="Customer",]
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/50), size=customerstestdata$hour, colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/20), size=customerstestdata$hour, colour="color")
qplot(subscriberstestdata$starttime, subscriberstestdata$hour, geom = "jitter", alpha = I(1/20), colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/20),  colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/10),  colour="color")
qplot(subscriberstestdata$starttime, subscriberstestdata$hour, geom = "jitter", alpha = I(1/10),  colour="color")
qplot(subscriberstestdata$starttime, subscriberstestdata$hour, geom = "jitter", alpha = I(1/40),  colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/10),  colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/40),  colour="color")
customerstestdata <- testdata[testdata$usertype=="Customer",]
subscriberstestdata <- testdata[testdata$usertype=="Subscriber",]
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/40),  colour="color")
qplot(subscriberstestdata$starttime, subscriberstestdata$hour, geom = "jitter", alpha = I(1/40),  colour="color")
qplot(customerstestdata$starttime, customerstestdata$hour, geom = "jitter", alpha = I(1/40),  colour="color")
divvydata$stationpair <- paste(divvydata$from_station_name,"&&",divvydata$to_station_name)
savehistory("~/DivvyFinalFinal.Rhistory")
barplot(as.matrix(testdata[,c("hour","stationpair")]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
barplot(as.matrix(testdata[,c(testdata$hour,testdata$stationpair)]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
testdatadata$stationpair <- paste(testdata$from_station_name,"&&",testdata$to_station_name)
testdata$stationpair <- paste(testdata$from_station_name,"&&",testdata$to_station_name)
barplot(as.matrix(testdata[,c(testdata$hour,testdata$stationpair)]), main="This is main line", xlab="This is xlabel", col=heat.colors(3), border="white")
source('~/OneDrive/MUM/datamining/DivvyData.R')
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/40), size=testdata$hour, colour="color")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/40), size=testdata$hour, colour="color", xlab="Time")
qplot(testdata$starttime, testdata$hour, geom = "jitter", alpha = I(1/40), size=testdata$hour, colour="color", xlab="Day", ylab="Time", main="Trips per hour in 2014")
barplot(table(subscribers$hour, subscribers$weekday), beside=T, col=terrain.colors(24), main="Subscribers - Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
barplot(table(divvydata$hour, divvydata$stationpair), beside=T, col=terrain.colors(24), main="Subscribers - Hour per Week day in the year 2014" ,xlab="24 hours each day", ylab="Number of Trips")
divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/rawdata/Divvy_Stations_Trips_2014-Q1Q2/Divvy_Trips_2014_Q1Q2.csv")
divvydata <- read.csv("/Users/janardhanbonu/OneDrive/MUM/datamining/divvy/Data/divvy2014/divvydata2014.csv")
divvydata$starttime <- strptime(divvydata$starttime,"%m/%d/%Y %H:%M")
divvydata$stoptime <- strptime(divvydata$stoptime,"%m/%d/%Y %H:%M")
divvydata$weekday <- weekdays(divvydata$starttime)
divvydata$month <- months(divvydata$starttime)
divvydata$season[divvydata$month=="January"] <- "Winter"
divvydata$season[divvydata$month=="February"] <- "Winter"
divvydata$season[divvydata$month=="March"] <- "Spring"
divvydata$season[divvydata$month=="April"] <- "Spring"
divvydata$season[divvydata$month=="May"] <- "Spring"
divvydata$season[divvydata$month=="June"] <- "Summer"
divvydata$season[divvydata$month=="July"] <- "Summer"
divvydata$season[divvydata$month=="August"] <- "Summer"
divvydata$season[divvydata$month=="September"] <- "Fall"
divvydata$season[divvydata$month=="October"] <- "Fall"
divvydata$season[divvydata$month=="November"] <- "Fall"
divvydata$season[divvydata$month=="December"] <- "Winter"
divvydata$season <- as.factor(divvydata$season)
divvydata$month <- as.factor(divvydata$month)
divvydata$weekday <- as.factor(divvydata$weekday)
divvydata$hour <- format(divvydata$starttime,"%H")
divvydata$stationpair <- paste(divvydata$from_station_name,"&&",divvydata$to_station_name)
plot(table(divvydata@stationpair))
qplot(table(divvydata@stationpair))
divvydata$season <- as.factor(divvydata$season)
divvydata$month <- as.factor(divvydata$month)
divvydata$weekday <- as.factor(divvydata$weekday)
divvydata$stationpair <- as.factor(divvydata$stationpair)
qplot(table(divvydata@stationpair))
qplot(table(divvydata$stationpair))
plot(table(divvydata$stationpair))
plot(table(divvydata$stationpair), labels=T)
plot(table(divvydata$stationpair))
plot(table(divvydata$stationpair, divvydata$hour))
